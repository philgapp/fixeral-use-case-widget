/* tslint:disable */
/* eslint-disable */
/**
 * Eatgrim Shipping API
 * Eatgrim Shipping API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tech@soundsgood.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Coordinates,
    CoordinatesFromJSON,
    CoordinatesFromJSONTyped,
    CoordinatesToJSON,
    Country,
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    PayloadBase,
    PayloadBaseFromJSON,
    PayloadBaseFromJSONTyped,
    PayloadBaseToJSON,
    PickupPayloadAllOf,
    PickupPayloadAllOfFromJSON,
    PickupPayloadAllOfFromJSONTyped,
    PickupPayloadAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface PickupPayload
 */
export interface PickupPayload {
    /**
     * 
     * @type {Country}
     * @memberof PickupPayload
     */
    country: Country;
    /**
     * Shopify product id
     * @type {string}
     * @memberof PickupPayload
     */
    pilotId: string;
    /**
     * Size (of product)
     * @type {string}
     * @memberof PickupPayload
     */
    size?: string;
    /**
     * 
     * @type {number}
     * @memberof PickupPayload
     */
    id?: number;
    /**
     * 
     * @type {Coordinates}
     * @memberof PickupPayload
     */
    currentPosition?: Coordinates;
}

export function PickupPayloadFromJSON(json: any): PickupPayload {
    return PickupPayloadFromJSONTyped(json, false);
}

export function PickupPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): PickupPayload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'country': CountryFromJSON(json['country']),
        'pilotId': json['pilotId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'currentPosition': !exists(json, 'currentPosition') ? undefined : CoordinatesFromJSON(json['currentPosition']),
    };
}

export function PickupPayloadToJSON(value?: PickupPayload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'country': CountryToJSON(value.country),
        'pilotId': value.pilotId,
        'size': value.size,
        'id': value.id,
        'currentPosition': CoordinatesToJSON(value.currentPosition),
    };
}


